/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.u1a3_aaronwang;

/**
 *
 * @author peixi
 */


public class U1A3_AaronWang extends javax.swing.JFrame {
    
    int[] intArray = new int[20];
    int arrayCapacity = 0;
    
    /**
     * Creates new form U1A3_AaronWang
     */
    public U1A3_AaronWang() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        entryPrompt = new javax.swing.JLabel();
        input = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        arrayDisplay = new javax.swing.JTextArea();
        addTo = new javax.swing.JButton();
        removeFrom = new javax.swing.JButton();
        listAll = new javax.swing.JButton();
        separator = new javax.swing.JSeparator();
        sumAll = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputBox = new javax.swing.JTextArea();
        sumEven = new javax.swing.JButton();
        sumOdd = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Integer Machine :)");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        bg.setBackground(new java.awt.Color(208, 205, 212));

        title.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        title.setForeground(new java.awt.Color(51, 102, 255));
        title.setText("<html><b><u>Integer Machine</u> :p</b><html>");

        entryPrompt.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        entryPrompt.setForeground(new java.awt.Color(55, 50, 62));
        entryPrompt.setText("Enter a positive integer here: ");

        input.setBackground(new java.awt.Color(221, 221, 239));
        input.setToolTipText("Enter a number!");
        input.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        input.setName(""); // NOI18N
        input.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        input.setSelectionColor(new java.awt.Color(0, 0, 0));
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        arrayDisplay.setEditable(false);
        arrayDisplay.setBackground(new java.awt.Color(221, 221, 239));
        arrayDisplay.setColumns(20);
        arrayDisplay.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        arrayDisplay.setLineWrap(true);
        arrayDisplay.setRows(5);
        arrayDisplay.setText("Try using the \"List\" button!");
        arrayDisplay.setToolTipText("Shows items in your array list.");
        arrayDisplay.setWrapStyleWord(true);
        arrayDisplay.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        arrayDisplay.setFocusable(false);
        jScrollPane1.setViewportView(arrayDisplay);

        addTo.setBackground(new java.awt.Color(255, 204, 255));
        addTo.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        addTo.setText("Add To List");
        addTo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addTo.setFocusable(false);

        removeFrom.setBackground(new java.awt.Color(255, 204, 255));
        removeFrom.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        removeFrom.setText("Remove");
        removeFrom.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeFrom.setFocusable(false);
        removeFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromActionPerformed(evt);
            }
        });

        listAll.setBackground(new java.awt.Color(255, 204, 255));
        listAll.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        listAll.setText("List All");
        listAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listAll.setFocusable(false);
        listAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllAllActionPerformed(evt);
            }
        });

        separator.setBackground(new java.awt.Color(0, 0, 0));
        separator.setForeground(new java.awt.Color(0, 0, 0));
        separator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        sumAll.setBackground(new java.awt.Color(204, 255, 255));
        sumAll.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        sumAll.setText("Sum All");
        sumAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sumAll.setFocusable(false);
        sumAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumAllActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        outputBox.setEditable(false);
        outputBox.setBackground(new java.awt.Color(221, 221, 239));
        outputBox.setColumns(20);
        outputBox.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        outputBox.setLineWrap(true);
        outputBox.setRows(1);
        outputBox.setToolTipText("Updates you on what the program does!");
        outputBox.setWrapStyleWord(true);
        outputBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        outputBox.setFocusable(false);
        jScrollPane2.setViewportView(outputBox);

        sumEven.setBackground(new java.awt.Color(204, 255, 255));
        sumEven.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        sumEven.setText("Sum Even");
        sumEven.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sumEven.setFocusable(false);

        sumOdd.setBackground(new java.awt.Color(204, 255, 255));
        sumOdd.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        sumOdd.setText("Sum Odd");
        sumOdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sumOdd.setFocusable(false);

        clearAll.setBackground(new java.awt.Color(255, 204, 204));
        clearAll.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        clearAll.setText("Clear All");
        clearAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearAll.setFocusable(false);
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(entryPrompt)
                                .addGap(18, 18, 18)
                                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(clearAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(bgLayout.createSequentialGroup()
                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(removeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(addTo)
                                            .addComponent(listAll, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(sumAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(sumEven, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                            .addComponent(sumOdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(entryPrompt)
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(clearAll, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addComponent(addTo)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(removeFrom)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(listAll)
                                    .addGap(10, 10, 10))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgLayout.createSequentialGroup()
                                    .addComponent(sumAll)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sumEven)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sumOdd)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        addTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToActionPerformed(evt);
            }
        });
        sumEven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumEvenActionPerformed(evt);
            }
        });
        sumOdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumOddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
           
    }//GEN-LAST:event_inputActionPerformed
    
    private void addToActionPerformed(java.awt.event.ActionEvent evt) {
        int addToArray;
        
        try{
            // Try to assign int value to addToArray
            addToArray = Integer.parseInt(input.getText());
            
            // If not valid entry, return.
            if(addToArray <= 0) {
                outputBox.setText("Please enter a positive integer!"); 
                return;
            }
            
            // If array full, return;
            if(arrayCapacity == intArray.length) {
                outputBox.setText("You have reached the maximum of " + intArray.length + " items in your list.");
                return;
            }
            
            // Iterate through to find next empty slot to overwrite
            // Didn't use enhanced for loop since I wanted access to the index itself.
            for(int i = 0; i < intArray.length; i++) {
                if(intArray[i] == 0) {
                    intArray[i] = addToArray;
                    arrayCapacity++;
                    outputBox.setText("Item #" + (i+1) + " has been set to " + addToArray + ".");
                    break;
                }
            }

        } catch (NumberFormatException nfe) {
            outputBox.setText("Please enter a VALID positive integer!");
        } finally {
            input.setText(""); // Always want to clear the input box.
        }
    }
    
    private void pushElements(int index) {
        // tempArray starts after the index to be removed and pushed.
        int[] tempArray = new int [intArray.length - index - 1];
        
        // Copies over inputArray into tempArray, starting immediately after the specified index.
        // Start i at one index after the element removed.
        // Start j at 0.
        // Set the next element in "temp" to each successive element in "ints" after removed element
        for(int i = index + 1, j = 0; i < intArray.length; i++, j++) { 
            tempArray[j] = intArray[i];
        }
        
        // Replaces each successive element in inputArray (after index) with each successive element in tempArray (from beginning)
        // When l hits tempArray's length, we know that we are done.
        for(int k = index, l = 0; l < tempArray.length; k++, l++) {
            intArray[k] = tempArray[l];
        }
        
        /* 
         * Edge case: a full array duplicates the final non-zero element in the last index.
         * Eg. given an array of length 5 --> [1, 2, 3, 4, 5]
         * Removing "2" would yield [1, 3, 4, 5, **5**] (Note the duplicate 5.)
         * Removing one number from a FULL array always should yield the final element equal to 0.
         * We still push other elements upwards as usual.
        */
        
        if(arrayCapacity == intArray.length) intArray[intArray.length - 1] = 0;
    }
    
    private void removeFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromActionPerformed
        int removeFromArray;
        boolean isInArray = false;
        
        try{
            // Try to assign int value to addToArray
            removeFromArray = Integer.parseInt(input.getText());
            
            // if not valid entry, return out.
            if(removeFromArray <= 0) {
                outputBox.setText("Please enter a positive integer!"); 
                return;
            }
            
            // If array is empty, return.
            if(arrayCapacity == 0) {
                outputBox.setText("You cannot remove items from an empty list!");
                return;
            }

            // Is user input in the array?
            // isInArray is set to true if ANY element matches user input.
            for (int i : intArray) {
                if (i == removeFromArray) {
                    isInArray = true; 
                    break;
                }
            }
            // If not in array, return out.
            if(!isInArray) {
                outputBox.setText("Your entry of " + removeFromArray + " is not in your list!"); 
                return;
            }

            // Iterate through array to find and remove specified value.
            for (int i = 0; i < intArray.length; i++) {
                if (intArray[i] == removeFromArray) {
                    intArray[i] = 0;
                    pushElements(i);
                    arrayCapacity--;
                    outputBox.setText("One instance of the number "+removeFromArray+" has been removed. Your list's capacity is now "+arrayCapacity+"/20.");
                    break;
                }
            }
            
        } catch (NumberFormatException nfe) {
            outputBox.setText("Please enter a VALID positive integer!");
        } finally {
            input.setText(""); // Always want to clear the input box.
        }
        
        
    }//GEN-LAST:event_removeFromActionPerformed

    private void listAllAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllAllActionPerformed
        String output = "Numbers in list:";
        
        // If array is empty, let them know! (and return out.)
        if(arrayCapacity == 0) {
            arrayDisplay.setText("Your list is currently empty!\n");
            outputBox.setText("");
            return;
        }

        // Iterate through and add the next element to "output".
        for (int i = 0; i < arrayCapacity; i++) {
            output += "\n• " + intArray[i];
        }
        arrayDisplay.setText(output);
        outputBox.setText("There are " + arrayCapacity + "/20 items in your list of numbers.");
        
        /*outputBox.scrollRectToVisible(new Rectangle(0, 0, 1, 1));
        jScrollPane1.getVerticalScrollBar().setValue(0);
        outputBox.setCaretPosition(0);*/
        
    }//GEN-LAST:event_listAllAllActionPerformed

    private void sumAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumAllActionPerformed
        String output = "Summing the following numbers:\n";
        int sum = 0;
        
        // Check if array is empty. If so, return.
        if(arrayCapacity == 0) {
            outputBox.setText("Your list is currently empty!");
            return;
        }
        
        // Add to sum, change output of arrayDisplay to show all numbers being summed.
        for(int i : intArray) {
            sum += i;
            if(i == 0) continue;
            output += "• " + i + "\n";
        }
        
        // Output!
        arrayDisplay.setText(output);
        outputBox.setText("The sum of all numbers in your list is " + sum + ".");
    }//GEN-LAST:event_sumAllActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        // Just iterate through and set all values to 0.
        for(int i = 0; i < intArray.length; i++) {
            intArray[i] = 0;
        }
        // Update capacity.
        arrayCapacity = 0;
        outputBox.setText("Removed all numbers from your list.");
        arrayDisplay.setText("");
    }//GEN-LAST:event_clearAllActionPerformed

    private void sumEvenActionPerformed(java.awt.event.ActionEvent evt) {
        String output = "Summing the following even numbers:\n";
        int sum = 0;
        
        // If empty, prompt user to add numbers to list, and return.
        if(arrayCapacity == 0) {
            outputBox.setText("Your list is currently empty!");
            return;
        }
        
        // Iterate through all elements in array. If == 0 or odd, skip through.
        for(int i : intArray) {
            if(i == 0 || i % 2 == 1) continue;
            sum += i;
            output += "• " + i + "\n";
        }
        
        // If output remains unchanged, we can conclude that the user has no even numbers in list.
        // Return.
        if(output.equals("Summing the following even numbers:\n")) {
            arrayDisplay.setText("You have no even numbers in your ;ist to sum!");
            outputBox.setText("Try adding some even numbers.");
            return;
        }
        
        // Output!
        arrayDisplay.setText(output);
        outputBox.setText("The sum of all even numbers in your list is " + sum + ".");
    }
    
    private void sumOddActionPerformed(java.awt.event.ActionEvent evt) {
        String output = "Summing the following odd numbers:\n";
        int sum = 0;
        
        // If empty, prompt user to add numbers to list, and return.
        if(arrayCapacity == 0) {
            outputBox.setText("Your list is currently empty!");
            return;
        }
        
        // Iterate through all elements in array. If == 0 or odd, skip through.
        for(int i : intArray) {
            if(i == 0 || i % 2 == 0) continue;
            sum += i;
            output += "• " + i + "\n";
        }
        
        // If output remains unchanged, we can conclude that the user has no even numbers in list.
        // Return.
        if(output.equals("Summing the following odd numbers:\n")) {
            arrayDisplay.setText("You have no odd numbers in your list to sum!");
            outputBox.setText("Try adding some odd numbers.");
            return;
        }
        
        // Output!
        arrayDisplay.setText(output);
        outputBox.setText("The sum of all odd numbers in your list is " + sum + ".");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(U1A3_AaronWang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(U1A3_AaronWang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(U1A3_AaronWang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(U1A3_AaronWang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new U1A3_AaronWang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTo;
    private javax.swing.JTextArea arrayDisplay;
    private javax.swing.JPanel bg;
    private javax.swing.JButton clearAll;
    private javax.swing.JLabel entryPrompt;
    private javax.swing.JTextField input;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listAll;
    private javax.swing.JTextArea outputBox;
    private javax.swing.JButton removeFrom;
    private javax.swing.JSeparator separator;
    private javax.swing.JButton sumAll;
    private javax.swing.JButton sumEven;
    private javax.swing.JButton sumOdd;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
